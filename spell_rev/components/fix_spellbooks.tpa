DEFINE_ACTION_FUNCTION fix_divine_spellbooks BEGIN

RANDOM_SEED 42

OUTER_FOR (level = 1; level <= 7; level += 1) BEGIN
  OUTER_SET $spell(~all~ ~%level%~ ~length~) = 0
  OUTER_SET $spell(~cleric~ ~%level%~ ~length~) = 0
  OUTER_SET $spell(~druid~ ~%level%~ ~length~) = 0
  OUTER_SET $spell(~bogus~ ~%level%~ ~length~) = 0
END

COPY_EXISTING_REGEXP GLOB ~^SPPR[1-7]\(0[1-9]\|[1-4][0-9]\)\.spl$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_SHORT 0x1c spell_type
    PATCH_IF (spell_type == 2) BEGIN // divine, just to be sure
      READ_SHORT 0x20 priest_type
      READ_SHORT 0x1e exclusion_flags
      READ_LONG  0x34 level
      TO_UPPER SOURCE_RES
      PATCH_IF (priest_type == 0x0000) BEGIN // all priests
        SPRINT type ~all~
      END
      ELSE PATCH_IF (priest_type == 0x4000) BEGIN // druid/ranger
        SPRINT type ~druid~
      END
      ELSE PATCH_IF (priest_type == 0x8000) BEGIN // cleric/paladin
        SPRINT type ~cleric~
      END
      ELSE BEGIN // no priests
        SPRINT type ~bogus~
      END
      PATCH_IF (level > 0 && level <= 7) BEGIN
        SET index = $spell(~%type%~ ~%level%~ ~length~)
        SPRINT $spell(~%type%~ ~%level%~ ~%index%~) ~%SOURCE_RES%~
        SET $spell(~%type%~ ~%level%~ ~length~) += 1
        SET $spell(~%type%~ ~%SOURCE_RES%~) = 1
        SET $spell(~%SOURCE_RES%~ ~excl~) = (exclusion_flags BAND 0b111111) // store just the alignment bits
        SET $spell(~%SOURCE_RES%~ ~level~) = level
      END
    END
  END
  BUT_ONLY

// replaces currently memorised spells with an alternative and removes those spells from the spellbook
DEFINE_PATCH_FUNCTION ~SWAP_BAD_MEMORISED_SPELLS~
 // INT_VAR
 //   alignment = 0b000000 // bitfield organised as per the .spl alignment restrictions field
 //   spell_type = 0 // 1 = cleric, 2 = druid, 3 = both
BEGIN
  READ_LONG 0x2b0 memorised_off
  READ_LONG 0x2b4 num_memorised
  FOR (i = 0; i < num_memorised; i += 1) BEGIN
    READ_ASCII (memorised_off + 0x0c*i) spell
    TO_UPPER spell
    PATCH_IF ((VARIABLE_IS_SET $spell(~bogus~ ~%spell%~)) ||
              (VARIABLE_IS_SET $spell(~cleric~ ~%spell%~) && spell_type == 2) ||
              (VARIABLE_IS_SET $spell(~druid~ ~%spell%~) && spell_type == 1)) BEGIN // spell the class shouldn't have
      SET level = $spell(~%spell%~ ~level~)
      SET all_length = $spell(~all~ ~%level%~ ~length~)
      SET cleric_length = $spell(~cleric~ ~%level%~ ~length~)
      SET druid_length = $spell(~druid~ ~%level%~ ~length~)
      PATCH_IF (spell_type == 1) BEGIN // casts cleric spells
        SET druid_length = 0 // make sure no druid-only spells can be randomly chosen
      END
      ELSE PATCH_IF (spell_type == 2) BEGIN // casts druid spells
        SET cleric_length = 0 // make sure no cleric-only spells can be randomly chosen
      END
      
      SET give_up_countdown = 5 // try 5 times to get a valid spell, then give up
      SET done = 0
      WHILE (done != 1 && give_up_countdown > 0) BEGIN
        SET result = RANDOM (1 (all_length + cleric_length + druid_length))
        PATCH_IF (result == 0) BEGIN // no valid spells to choose from at this level
          REMOVE_MEMORIZED_SPELL ~%spell%~
        END
        ELSE BEGIN
          SET result -= 1
          PATCH_IF (result < all_length) BEGIN // random result falls into spells available for both clerics and druids
            SPRINT new_spell $spell(~all~ ~%level%~ ~%result%~)
          END
          ELSE PATCH_IF (result < (all_length + cleric_length)) BEGIN // random result falls into spells available for clerics
            SET result -= all_length
            SPRINT new_spell $spell(~cleric~ ~%level%~ ~%result%~)
          END
          ELSE PATCH_IF (result < (all_length + cleric_length + druid_length)) BEGIN // random result falls into spells available for druids
            SET result -= (all_length + cleric_length)
            SPRINT new_spell $spell(~druid~ ~%level%~ ~%result%~)
          END
          SET exclusion = $spell(~%new_spell%~ ~excl~)
          PATCH_IF ((exclusion BAND alignment) == 0) BEGIN // usable by priests of this alignment
            WRITE_ASCIIE (memorised_off + 0x0c*i) ~%new_spell%~ #8
            SET done = 1
          END
          ELSE BEGIN
            SET give_up_countdown -= 1 // decrement countdown and try once more to find a valid spell
          END
        END
      END
    END
  END
END

DEFINE_PATCH_MACRO ~REMOVE_SPELLS_OF_TYPE~ BEGIN
  FOR (level = 1; level <= 7; level += 1) BEGIN
    SET length = $spell(~%type%~ ~%level%~ ~length~)
    FOR (i = 0; i < length; i += 1) BEGIN
      SPRINT spell $spell(~%type%~ ~%level%~ ~%i%~)
      REMOVE_KNOWN_SPELL ~%spell%~
      REMOVE_MEMORIZED_SPELL ~%spell%~
    END
  END
END

// removes all spells that the class shouldn't have access to anymore
DEFINE_PATCH_FUNCTION ~REMOVE_BAD_KNOWN_SPELLS~
 // INT_VAR spell_type = 0 // 1 = cleric, 2 = druid, 3 = both
BEGIN
  PATCH_IF (spell_type == 1) BEGIN // remove druid spells from clerics
    SPRINT type ~druid~
    LAUNCH_PATCH_MACRO ~REMOVE_SPELLS_OF_TYPE~
  END
  ELSE PATCH_IF (spell_type = 2) BEGIN // remove cleric spells from druids
    SPRINT type ~cleric~
    LAUNCH_PATCH_MACRO ~REMOVE_SPELLS_OF_TYPE~
  END

  // remove bogus spells from all classes
  SPRINT type ~bogus~
  LAUNCH_PATCH_MACRO ~REMOVE_SPELLS_OF_TYPE~
END

// used by function below
DEFINE_PATCH_MACRO ~ADD_SPELLS_OF_TYPE~ BEGIN
  SET length = $spell(~%type%~ ~%level%~ ~length~)
  FOR (i = 0; i < length; i += 1) BEGIN
    SPRINT spell $spell(~%type%~ ~%level%~ ~%i%~)
    SET level = $spell(~%spell%~ ~level~)
    REMOVE_KNOWN_SPELL ~%spell%~
    SET exclusion = $spell(~%spell%~ ~excl~)
    PATCH_IF ((exclusion BAND alignment) == 0) BEGIN // usable by priests of this alignment
      ADD_KNOWN_SPELL ~%spell%~ (level - 1) ~priest~
    END
  END
END

// adds new spells to spellbook
DEFINE_PATCH_FUNCTION ~ADD_NEW_KNOWN_SPELLS~
 // INT_VAR
 //   alignment = 0b000000 // bitfield organised as per the .spl alignment restrictions field
 //   highest_spell_level = 0 // highest level of spells to add to spellbook
 //   spell_type = 0 // 1 = cleric, 2 = druid, 3 = both
BEGIN
  FOR (level = 1; level <= highest_spell_level; level += 1) BEGIN
    // spells available to all
    SPRINT type ~all~
    LAUNCH_PATCH_MACRO ~ADD_SPELLS_OF_TYPE~
    PATCH_IF (spell_type == 1) BEGIN // cleric
      SPRINT type ~cleric~
      LAUNCH_PATCH_MACRO ~ADD_SPELLS_OF_TYPE~
    END
    ELSE PATCH_IF (spell_type == 2) BEGIN // druid
      SPRINT type ~druid~
      LAUNCH_PATCH_MACRO ~ADD_SPELLS_OF_TYPE~
    END
    ELSE PATCH_IF (spell_type == 3) BEGIN // both
      SPRINT type ~cleric~
      LAUNCH_PATCH_MACRO ~ADD_SPELLS_OF_TYPE~
      SPRINT type ~druid~
      LAUNCH_PATCH_MACRO ~ADD_SPELLS_OF_TYPE~
    END
  END
END

// determines highest level of spells that can be cast
DEFINE_PATCH_FUNCTION ~DETERMINE_MAX_SPELL_LEVEL~
  RET highest_spell_level
BEGIN
  READ_LONG 0x2a8 memorisation_info_off
  READ_LONG 0x2ac num_memorisation_info
  SET highest_spell_level = 0
  FOR (i = 0; i < num_memorisation_info; i += 1) BEGIN
    READ_SHORT (memorisation_info_off + 0x10*i + 0x00) level
    READ_SHORT (memorisation_info_off + 0x10*i + 0x02) num_memorisable
    READ_SHORT (memorisation_info_off + 0x10*i + 0x06) spell_type
    PATCH_IF (spell_type == 0 && num_memorisable > 0) BEGIN // can memorise at least 1 divine spell at this level
      SET level += 1 // level is stored as one below actual value
      PATCH_IF (level > highest_spell_level) BEGIN // update highest_spell_level if new level is greater than those seen previously
        SET highest_spell_level = level
      END
    END
  END
END
  
// fix spellbooks of divine casters
ACTION_PHP_EACH JOINABLE_NPC_ARRAY AS cre => dv BEGIN
  PRINT ~%cre% => %dv%~ 
  COPY_EXISTING ~%cre%~ ~override~
	PATCH_IF (SOURCE_SIZE > 0x2d3) BEGIN
      READ_BYTE 0x273 class
      
      PATCH_IF (class == 3 || class == 6 || class == 8 || class == 11 || class == 12 || class == 14 || class == 15 || class == 16 || class == 17 || class == 18) BEGIN // divine casters
        SET cleric = 0
        SET druid = 0

        // remove old spells and replace any that were memorised with semi-equivalent ones
        PATCH_IF (class == 3 || class == 6 || class == 8 || class == 14 || class == 15 || class == 17) BEGIN // cleric or paladin
          SET cleric = 1
        END
        ELSE PATCH_IF (class == 11 || class == 12 || class == 16) BEGIN // druid or ranger
          SET druid = 1
        END
        ELSE PATCH_IF (class == 18) BEGIN // cleric/ranger multi-class
          SET cleric = 1
          SET druid = 1
          READ_LONG 0x10 flags
          PATCH_IF ((flags BAND 0b100000000) == 0b100000000) BEGIN // original class was ranger: dual-class c/r
            READ_BYTE 0x234 cleric_level
            READ_BYTE 0x235 ranger_level
            
            // if waiting to regain ranger abilities, shouldn't have access to druid spells
            PATCH_IF (ranger_level <= cleric_level) BEGIN
              SET druid = 0
            END
          END
        END
        
        SET spell_type = 0
        PATCH_IF (cleric == 1 && druid == 1) BEGIN
          SET spell_type = 3 // spell_type 3 = casts both
        END
        ELSE PATCH_IF (cleric == 1) BEGIN
          SET spell_type = 1 // spell_type 1 = casts cleric
        END
        ELSE PATCH_IF (druid == 1) BEGIN
          SET spell_type = 2 // spell_type 2 = casts druid
        END
        
        // match alignment to priest spell exclusion flags
        READ_BYTE 0x27b ids_alignment
        SET alignment = 0
        PATCH_IF (ids_alignment == 0x11) BEGIN // lawful good
          SET alignment = 0b010100
        END
        ELSE PATCH_IF (ids_alignment == 0x12) BEGIN // lawful neutral
          SET alignment = 0b011000
        END
        ELSE PATCH_IF (ids_alignment == 0x13) BEGIN // lawful evil
          SET alignment = 0b010010
        END
        ELSE PATCH_IF (ids_alignment == 0x21) BEGIN // neutral good
          SET alignment = 0b100100
        END
        ELSE PATCH_IF (ids_alignment == 0x22) BEGIN // neutral
          SET alignment = 0b101000
        END
        ELSE PATCH_IF (ids_alignment == 0x23) BEGIN // neutral evil
          SET alignment = 0b100010
        END
        ELSE PATCH_IF (ids_alignment == 0x31) BEGIN // chaotic good
          SET alignment = 0b000101
        END
        ELSE PATCH_IF (ids_alignment == 0x32) BEGIN // chaotic neutral
          SET alignment = 0b001001
        END
        ELSE PATCH_IF (ids_alignment == 0x33) BEGIN // chaotic evil
          SET alignment = 0b000011
        END
        
        LAUNCH_PATCH_FUNCTION ~SWAP_BAD_MEMORISED_SPELLS~ END
        LAUNCH_PATCH_FUNCTION ~REMOVE_BAD_KNOWN_SPELLS~ END
        // determines highest level of spells that can be cast so that we only add spells up to that level
        LAUNCH_PATCH_FUNCTION ~DETERMINE_MAX_SPELL_LEVEL~ RET highest_spell_level = highest_spell_level END
        LAUNCH_PATCH_FUNCTION ~ADD_NEW_KNOWN_SPELLS~ END
      END
    END
  BUT_ONLY
END

END // end define function

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\\\
////\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\
//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\\\
////\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\

DEFINE_ACTION_FUNCTION fix_arcane_spellbooks BEGIN

RANDOM_SEED 42

OUTER_FOR (level = 1; level <= 9; level += 1) BEGIN
  OUTER_SET $spell(~abjurer~ ~%level%~ ~length~) = 0
  OUTER_SET $spell(~conjurer~ ~%level%~ ~length~) = 0
  OUTER_SET $spell(~diviner~ ~%level%~ ~length~) = 0
  OUTER_SET $spell(~enchanter~ ~%level%~ ~length~) = 0
  OUTER_SET $spell(~illusionist~ ~%level%~ ~length~) = 0
  OUTER_SET $spell(~invoker~ ~%level%~ ~length~) = 0
  OUTER_SET $spell(~necromancer~ ~%level%~ ~length~) = 0
  OUTER_SET $spell(~transmuter~ ~%level%~ ~length~) = 0
  OUTER_SET $spell(~bogus~ ~%level%~ ~length~) = 0
END

COPY_EXISTING_REGEXP GLOB ~^SPWI[1-9]\(0[1-9]\|[1-4][0-9]\)\.spl$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_SHORT 0x1c spell_type
    PATCH_IF (spell_type == 1) BEGIN // arcane, just to be sure
      READ_BYTE 0x21 priest_flag
      READ_SHORT 0x1e specialist_flag
      READ_LONG  0x34 level
      TO_UPPER SOURCE_RES
	  PATCH_IF (priest_flag BOR 0b00111111 = 0b00111111) & (specialist_flag == 0x0040) BEGIN // abjurer
        SPRINT school ~abjurer~
      END
	  ELSE PATCH_IF (priest_flag BOR 0b00111111 = 0b00111111) & (specialist_flag == 0x0080) BEGIN // conjurer
        SPRINT school ~conjurer~
      END
	  ELSE PATCH_IF (priest_flag BOR 0b00111111 = 0b00111111) & (specialist_flag == 0x0100) BEGIN // diviner
        SPRINT school ~diviner~
      END
	  ELSE PATCH_IF (priest_flag BOR 0b00111111 = 0b00111111) & (specialist_flag == 0x0200) BEGIN // enchanter
        SPRINT school ~enchanter~
      END
	  ELSE PATCH_IF (priest_flag BOR 0b00111111 = 0b00111111) & (specialist_flag == 0x0400) BEGIN // illusionist
        SPRINT school ~illusionist~
      END
	  ELSE PATCH_IF (priest_flag BOR 0b00111111 = 0b00111111) & (specialist_flag == 0x0800) BEGIN // invoker
        SPRINT school ~invoker~
      END
	  ELSE PATCH_IF (priest_flag BOR 0b00111111 = 0b00111111) & (specialist_flag == 0x1000) BEGIN // necromancer
        SPRINT school ~necromancer~
      END
	  ELSE PATCH_IF (priest_flag BOR 0b00111111 = 0b00111111) & (specialist_flag == 0x2000) BEGIN // transmuter
        SPRINT school ~transmuter~
      END
      ELSE PATCH_IF (priest_flag BAND 0b11000000 = 0b11000000) BEGIN // disabled
        SPRINT school ~bogus~
      END
      PATCH_IF (level > 0 && level <= 9) BEGIN
        SET index = $spell(~%school%~ ~%level%~ ~length~)
        SPRINT $spell(~%school%~ ~%level%~ ~%index%~) ~%SOURCE_RES%~
        SET $spell(~%school%~ ~%level%~ ~length~) += 1
        SET $spell(~%school%~ ~%SOURCE_RES%~) = 1
//        SET $spell(~%SOURCE_RES%~ ~excl~) = (specialist_flag BAND 0b111111) // store the exclusionary school
        SET $spell(~%SOURCE_RES%~ ~level~) = level
      END
    END
  END
  BUT_ONLY

DEFINE_PATCH_MACRO ~REMOVE_SPELLS_OF_TYPE~ BEGIN
  FOR (level = 1; level <= 9; level += 1) BEGIN
    SET length = $spell(~%school%~ ~%level%~ ~length~)
    FOR (i = 0; i < length; i += 1) BEGIN
      SPRINT spell $spell(~%school%~ ~%level%~ ~%i%~)
      REMOVE_KNOWN_SPELL ~%spell%~
	  REMOVE_MEMORIZED_SPELL ~%spell%~
    END
  END
END

// removes all spells that the class shouldn't have access to anymore
DEFINE_PATCH_FUNCTION ~REMOVE_BAD_KNOWN_SPELLS~
BEGIN
  PATCH_IF (spell_school == 8) BEGIN // remove transmuter spells from abjurers
    SPRINT school ~abjurer~
    LAUNCH_PATCH_MACRO ~REMOVE_SPELLS_OF_TYPE~
  END
  ELSE PATCH_IF (spell_school == 3) BEGIN // remove diviner spells from conjurers
    SPRINT school ~conjurer~
    LAUNCH_PATCH_MACRO ~REMOVE_SPELLS_OF_TYPE~
  END
  ELSE PATCH_IF (spell_school == 2) BEGIN // remove conjurer spells from diviners
    SPRINT school ~diviner~
    LAUNCH_PATCH_MACRO ~REMOVE_SPELLS_OF_TYPE~
  END
  ELSE PATCH_IF (spell_school == 6) BEGIN // remove invoker spells from enchanters
    SPRINT school ~enchanter~
    LAUNCH_PATCH_MACRO ~REMOVE_SPELLS_OF_TYPE~
  END
  ELSE PATCH_IF (spell_school == 7) BEGIN // remove necromancer spells from illusionists
    SPRINT school ~illusionist~
    LAUNCH_PATCH_MACRO ~REMOVE_SPELLS_OF_TYPE~
  END
  ELSE PATCH_IF (spell_school == 4) BEGIN // remove enchanter spells from invokers
    SPRINT school ~invoker~
    LAUNCH_PATCH_MACRO ~REMOVE_SPELLS_OF_TYPE~
  END
  ELSE PATCH_IF (spell_school == 5) BEGIN // remove illusionist spells from necromancers
    SPRINT school ~necromancer~
    LAUNCH_PATCH_MACRO ~REMOVE_SPELLS_OF_TYPE~
  END
  ELSE PATCH_IF (spell_school == 1) BEGIN // remove abjurer spells from transmuters
    SPRINT school ~transmuter~
    LAUNCH_PATCH_MACRO ~REMOVE_SPELLS_OF_TYPE~
  END

  // remove bogus spells from all classes
  SPRINT school ~bogus~
  LAUNCH_PATCH_MACRO ~REMOVE_SPELLS_OF_TYPE~
END

// determines highest level of spells that can be cast
DEFINE_PATCH_FUNCTION ~DETERMINE_MAX_SPELL_LEVEL~
  RET highest_spell_level
BEGIN
  READ_LONG 0x2a8 memorisation_info_off
  READ_LONG 0x2ac num_memorisation_info
  SET highest_spell_level = 0
  FOR (i = 0; i < num_memorisation_info; i += 1) BEGIN
    READ_SHORT (memorisation_info_off + 0x10*i + 0x00) level
    READ_SHORT (memorisation_info_off + 0x10*i + 0x02) num_memorisable
    READ_SHORT (memorisation_info_off + 0x10*i + 0x06) spell_school
    PATCH_IF (spell_school == 0 && num_memorisable > 0) BEGIN // can memorise at least 1 arcane spell at this level
      SET level += 1 // level is stored as one below actual value
      PATCH_IF (level > highest_spell_level) BEGIN // update highest_spell_level if new level is greater than those seen previously
        SET highest_spell_level = level
      END
    END
  END
END
  
// fix spellbooks of arcane casters
ACTION_PHP_EACH JOINABLE_NPC_ARRAY AS cre => dv BEGIN
  PRINT ~%cre% => %dv%~ 
  COPY_EXISTING ~%cre%~ ~override~
	PATCH_IF (SOURCE_SIZE > 0x2d3) BEGIN
      READ_BYTE 0x273 class
	  READ_BYTE 0x246 kit
      
      PATCH_IF (class == 1 || class == 5 || class == 7 || class == 10 || class == 13 || class == 14 || class == 17 || class == 19) BEGIN // arcane casters
        SET abjurer = 0
		SET conjurer = 0
		SET diviner = 0
		SET enchanter = 0
		SET illusionist = 0
		SET invoker = 0
		SET necromancer = 0
		SET transmuter = 0

        // remove old spells
        /*PATCH_IF (class == 1 || class == 5 || class == 7 || class == 10 || class == 13 || class == 14 || class == 17 || class == 19) & (kit == 16384 || kit == 16385 || kit == 16386 || kit == 16387 || kit == 16394 || kit == 16395 || kit == 16396 || kit == 16397 || kit == 16398 || kit == 16399 || kit == 16403 || kit == 16404 || kit == 16405 || kit == 1073741824 || kit == 16417 || kit == 16418 || kit == 16419 || kit == 16424 || kit == 16425 || kit == -2147483648) BEGIN // generalist mage
          SET generalist = 1
        END*/
		PATCH_IF (class == 1 || class == 7 || class == 10 || class == 13 || class == 14 || class == 17) & (kit == 64) BEGIN // abjurer
          SET abjurer = 1
        END
		PATCH_IF (class == 1 || class == 7 || class == 10 || class == 13 || class == 14 || class == 17) & (kit == 128) BEGIN // conjurer
          SET conjurer = 1
        END
		PATCH_IF (class == 1 || class == 7 || class == 10 || class == 13 || class == 14 || class == 17) & (kit == 256) BEGIN // diviner
          SET diviner = 1
        END
		PATCH_IF (class == 1 || class == 7 || class == 10 || class == 13 || class == 14 || class == 17) & (kit == 512) BEGIN // enchanter
          SET enchanter = 1
        END
		PATCH_IF (class == 1 || class == 7 || class == 10 || class == 13 || class == 14 || class == 17) & (kit == 1024) BEGIN // illusionist
          SET illusionist = 1
        END
		PATCH_IF (class == 1 || class == 7 || class == 10 || class == 13 || class == 14 || class == 17) & (kit == 2048) BEGIN // invoker
          SET invoker = 1
        END
		PATCH_IF (class == 1 || class == 7 || class == 10 || class == 13 || class == 14 || class == 17) & (kit == 4096) BEGIN // necromancer
          SET necromancer = 1
        END
		PATCH_IF (class == 1 || class == 7 || class == 10 || class == 13 || class == 14 || class == 17) & (kit == 8192) BEGIN // transmuter
          SET transmuter = 1
        END
        
        SET spell_school = 0
        PATCH_IF (abjurer == 1) BEGIN
          SET spell_school = 8
        END
        ELSE PATCH_IF (conjurer == 1) BEGIN
          SET spell_school = 3
        END
        ELSE PATCH_IF (diviner == 1) BEGIN
          SET spell_school = 2
        END
		ELSE PATCH_IF (enchanter == 1) BEGIN
          SET spell_school = 6
        END
		ELSE PATCH_IF (illusionist == 1) BEGIN
          SET spell_school = 7
        END
		ELSE PATCH_IF (invoker == 1) BEGIN
          SET spell_school = 4
        END
		ELSE PATCH_IF (necromancer = 1) BEGIN
          SET spell_school = 5
        END
		ELSE PATCH_IF (transmuter == 1) BEGIN
          SET spell_school = 1
        END
        
        LAUNCH_PATCH_FUNCTION ~REMOVE_BAD_KNOWN_SPELLS~ END
        // determines highest level of spells that can be cast so that we only add spells up to that level
        LAUNCH_PATCH_FUNCTION ~DETERMINE_MAX_SPELL_LEVEL~ RET highest_spell_level = highest_spell_level END
      END
    END
  BUT_ONLY
END

END // end define function